name: Deploy to OVH

on:
  push:
    branches:
      - preprod

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod
    env:
      USER: ${{ secrets.USER }}
      PASSWORD: ${{ secrets.PASSWORD }}
      HOST: ${{ secrets.HOST }}
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Install SSH Client
        run: |
          sudo apt-get update && sudo apt-get install openssh-client sshpass

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create env.properties and certificate files
        run: |

          touch ./tls/server.p12
          echo -e "${{ secrets.SECRET_KEY }}" > ./tls/server.key
          echo -e "${{ secrets.SECRET_P7B }}" > ./tls/server.p7b
          openssl pkcs7 -print_certs -in ./tls/server.p7b -out ./tls/server.pem
          openssl pkcs12 -export -inkey ./tls/server.key -in ./tls/server.p7b -name etupdt -out ./tls/server.p12 -passout pass:${{ secrets.TLS_PASSWORD }}

          echo "# Autogenerated env.properties file" > env.properties
          echo "LIVE_RELOAD=false" >> env.properties

          echo "DDL_AUTO=none" >> env.properties
          echo "SHOW_SQL=true" >> env.properties

          echo "DB_URL=postgres" >> env.properties
          echo "DB_PORT=5432" >> env.properties
          echo "DB_DATABASE=${{ vars.DB_DATABASE }}" >> env.properties
          echo "DB_USER=${{ secrets.DB_USER }}" >> env.properties
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> env.properties

          echo "AUTO_COMMIT=true" >> env.properties
          
          echo "LOG_FILE=logs/app.log" >> env.properties
          
          echo "CONTEXT_PATH=" >> env.properties

          echo "IMAGE_PATH=/usr/local/" >> env.properties
          
          echo "SWAGGER=false" >> env.properties
          
          echo "MAIL_USER=${{ secrets.MAIL_USER }}" >> env.properties
          echo "MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}" >> env.properties
          echo "MAIL_HOST=${{ vars.MAIL_HOST }}" >> env.properties
          echo "MAIL_PORT=${{ vars.MAIL_PORT }}" >> env.properties

          echo "MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}" >> env.properties
          echo "MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}" >> env.properties
          echo "MONGO_USER=${{ secrets.MONGO_USER }}" >> env.properties
          echo "MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}" >> env.properties
          echo "MONGO_DB=${{ vars.MONGO_DB }}" >> env.properties
          echo "MONGO_URL=mongodb://${{ secrets.MONGO_USER }}:${{ secrets.MONGO_PASSWORD }}@mongodb:27017/${{ vars.MONGO_DB }}" >> env.properties

          echo "JWT_KEY=${{ secrets.JWT_KEY }}" >> env.properties
          echo "JWT_EXP=300000" >> env.properties
          echo "JWT_EXP_REFRESH=450000" >> env.properties

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: |
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            SECRET_P7B=${{ secrets.SECRET_P7B }}
            TLS_PASSWORD=${{ secrets.TLS_PASSWORD }}
            INIT=prod

      - name: Deploy using docker-compose
        run: |
          sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no env.properties ${USER}@${HOST}:./
          sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no -r ./init/prod ${USER}@${HOST}:.
          sshpass -p $PASSWORD scp -o StrictHostKeyChecking=no ./docker-compose-back-prod.yml ${USER}@${HOST}:.
          sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no ${USER}@${HOST} "echo ${{ secrets.GITHUB_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin"
          sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no ${USER}@${HOST} "sudo docker compose -f docker-compose-back-prod.yml pull"
          sshpass -p $PASSWORD ssh -o StrictHostKeyChecking=no ${USER}@${HOST} "sudo docker compose -f docker-compose-back-prod.yml up -d"
